package at.fhhagenberg.sqelevator.controller;

import at.fhhagenberg.sqelevator.constants.Constants;
import at.fhhagenberg.sqelevator.model.ApplicationModel;

import javax.swing.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.rmi.RemoteException;

/**
 * Controller class that handles the interactions between the view and the model
 */
public class EccController extends WindowAdapter implements ActionListener {

    private ApplicationModel model;

    private Timer timer;

    /**
     * Constructor. Sets up the refresh timer of the system and initializes the controller with a model reference.
     * @param model The reference to the model class of the application.
     */
    public EccController(ApplicationModel model) {
        this.model = model;
        this.timer = new Timer(Constants.UPDATE_RATE_MS, this);
        timer.setActionCommand(Constants.ACTION_COMMAND_TIMER);
    }

    /**
     * Initializes the application on startup and starts the refresh timer.
     */
    public void initApplication() {
        model.initApplication();
        timer.start();
    }

    /**
     * Gets called each time the refresh timer "ticks". Triggers the model to update itself.
     * @param e The action event that holds the identifier string of the sender.
     */
    @Override
    public void actionPerformed(ActionEvent e) {
        switch (e.getActionCommand()) {
            case Constants.ACTION_COMMAND_TIMER: {
                model.update();
                break;
            }
            default: {
                break;
            }
        }
    }

    /**
     * Called when the close button of the window is pressed. Stops the timer and ends the application.
     * @param e The window event.
     */
    @Override
    public void windowClosing(WindowEvent e) {
        super.windowClosing(e);
        timer.stop();
        e.getWindow().dispose();
    }

    /**
     * Interface method for the view when the user changes the selected floor.
     * @param elevatorIndex The index of the currently selected elevator that the user wants to control.
     * @param i The floor to which the elevator should be sent.
     */
    public void setSelectedFloor(int elevatorIndex ,int i){
        try {
            model.setManualElevatorTarget(elevatorIndex,i);
        } catch (RemoteException e) {
            e.printStackTrace();
        }
    }

    /**
     * Interface method for the view when the user switches between automatic and manual mode for an elevator.
     * @param elevatorIndex The index of the elevator of which the user wants to change the control mode.
     * @param bool True for automatic, false for manual control of the elevator.
     */
    public void setAutomaticMode(int elevatorIndex, Boolean bool){
        model.setElevatorAutomaticMode(elevatorIndex, bool);
    }

    /**
     * Interface method for the view when the user switches between the elevators he wants to control.
     * @param elevatorIndex The index of the currently selected elevator.
     */
    public void setSelectedElevator(int elevatorIndex){
        model.setSelectedElevator(elevatorIndex);
    }

    // Autogenerated methods that had to be implemented, but are not in use.

    @Override
    public void windowOpened(WindowEvent e) {

    }

    @Override
    public void windowClosed(WindowEvent e) {

    }

    @Override
    public void windowIconified(WindowEvent e) {

    }

    @Override
    public void windowDeiconified(WindowEvent e) {

    }

    @Override
    public void windowActivated(WindowEvent e) {

    }

    @Override
    public void windowDeactivated(WindowEvent e) {

    }

}
